import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

# Load the diabetes dataset from a CSV file
diabetes_dataset = pd.read_csv('D:\c and cpp\diabetes.csv')

# Separate features (X) and target variable (Y)
X = diabetes_dataset.drop(columns='Outcome', axis=1)
Y = diabetes_dataset['Outcome']

# Standardize the feature data using StandardScaler
scaler = StandardScaler()
standardized_data = scaler.fit_transform(X)
X = standardized_data

# Split the data into training and testing sets
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

# Create an SVM classifier with a linear kernel
classifier = svm.SVC(kernel='linear')

# Train the classifier on the training data
classifier.fit(X_train, Y_train)

# Predict the training data labels
X_train_prediction = classifier.predict(X_train)

# Calculate training data accuracy
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

# Predict the testing data labels
X_test_prediction = classifier.predict(X_test)

# Calculate testing data accuracy
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

# Define input data for prediction
input_data = (5, 166, 72, 19, 175, 25.8, 0.587, 51)

# Convert input data to a NumPy array
input_data_as_numpy_array = np.asarray(input_data)

# Reshape the input data
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

# Standardize the input data
std_data = scaler.transform(input_data_reshaped)

# Predict whether the person is diabetic or not
prediction = classifier.predict(std_data)

# Print the prediction result
if (prediction[0] == 0):
    print('The person is not diabetic')
else:
    print('The person is diabetic')
